import type { OperationData } from "@ts-gql/tag/no-transform";
import { gql } from "@ts-gql/tag/no-transform";
import type { GetServerSideProps, InferGetServerSidePropsType } from "next";
import Head from "next/head";
import { Fragment } from "react";

import { fetchGraphQL } from "../fetch-graphql";

const POKEMON_QUERY = gql`
  query POKEMON_QUERY($first: Int!) {
    query {
      pokemons(first: $first) {
        id
        name
        number
        image
      }
    }
  }
` as import("../__generated__/ts-gql/POKEMON_QUERY").type;

type PokemonResult = NonNullable<OperationData<typeof POKEMON_QUERY>>;
type PokemonQuery = NonNullable<PokemonResult["query"]>;
type PokemonArray = PokemonQuery["pokemons"];

export const getServerSideProps: GetServerSideProps<{
  pokemonArray: PokemonArray;
}> = async () => {
  const result = await fetchGraphQL(POKEMON_QUERY, { first: 151 });

  if (!result.query?.pokemons) {
    throw new Error("Query failed");
  }

  return {
    props: {
      pokemonArray: result.query.pokemons,
    },
  };
};

export default function Home({
  pokemonArray,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
  return (
    <Fragment>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="p-4 max-w-5xl mx-auto flex flex-col gap-4">
        <h1 className="text-4xl font-semibold">ts-gql demo</h1>
        <p>
          This is a demo of ts-gql using the Pokemon API found here:{" "}
          <a
            href="https://graphql-pokemon2.vercel.app/"
            className="text-blue-700 underline"
          >
            https://graphql-pokemon2.vercel.app/
          </a>
        </p>
        <p>
          You can learn more about ts-gql here:{" "}
          <a
            href="https://github.com/thinkmill/ts-gql"
            className="text-blue-700 underline"
          >
            https://github.com/thinkmill/ts-gql
          </a>
        </p>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
          {pokemonArray?.map(
            (pokemon) =>
              pokemon && (
                <div
                  key={pokemon.id}
                  className="aspect-square relative rounded-lg overflow-hidden shadow-lg border"
                >
                  {pokemon.image && (
                    // eslint-disable-next-line @next/next/no-img-element
                    <img
                      src={pokemon.image}
                      alt={pokemon.name ?? ""}
                      className="object-cover w-full h-full absolute inset-0 object-top"
                    />
                  )}
                  <div className="relative flex items-end p-4 bg-gradient-to-t from-black via-transparent h-full text-white font-semibold">
                    <h2>
                      <span className="block text-sm">#{pokemon.number}</span>
                      <span className="text-xl tracking-wider">
                        {pokemon.name}
                      </span>
                    </h2>
                  </div>
                </div>
              )
          )}
        </div>
      </main>
    </Fragment>
  );
}
